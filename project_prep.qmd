---
title: "Aliceblue_Project_Prep"
subtitle: "Data Preparation"
format: html
editor: visual
---

# Introduction

This document outlines the data engineering required to reconstruct and improve the visualisation of the heat map as shown in @fig-old-vis-on-poster, which depicts the monthly inflationary impact on key goods and services across each month in Singapore over 2023.

The code below requires the following packages:

```{r}
#| label: library
#| message: false

library(tidyverse)
library(knitr)
library(readxl)
```

```{r}
#| label: fig-old-vis-on-poster
#| echo: false
#| fig.cap: "Heat map of inflationary impact on key items over 2023."

include_graphics("images/old_poster.png")
```

# Data Cleaning

The Straits Times based their visualisation on data published by the Singapore Department of Statistics (DOS). whereby the data in CSV format represents the CPI for each category of key goods and services with 2019 as the base year. The CSV file contains 15 separate sheets which cover average retail prices, CPI and year-on-year percent change in CPI across various time periods (annual, half-yearly, quarterly, and monthly) respectively.

However, with reference to @fig-old-vis-on-poster, only Sheet T11 *(Percent Change In Consumer Price Index (CPI) Over Corresponding Period Of Previous Year, 2019 As Base Year, Monthly)* will be used to accurately reflect the year-on-year data ordered by month as visualised in the heat map.

Relevant columns for data processing include:

-   `Variables`: Name of key items. These are separated into sub-categories such as "Food", "Clothing & Footwear", "Housing & Utilities", etc.

-   `Date columns`: These represent year-on-year CPI values for each Variable. The columns are named according to the corresponding year and month they represent, such as 2019 Jan, 2020 Jun, etc.

The following code loads the data from Sheet T11 in the CSV file, skipping the first 5 rows and removing any rows with NA values:

```{r}
#| label: load-data

# Load full data, select specific sheet (T11), skip first 5 rows and remove rows with NA values
data <- read_excel("cpiapr24.xlsx", sheet = "T11", skip = 5) |>
  filter(if_all(everything(), ~ !is.na(.)))

data
```

The data is filtered to include only the relevant variables so as to focus on the specific categories visualised on the heat map:

```{r}
#| label: filter-data-categories

# Filter the data to include only these categories
categories <- c(
        "Food",
        #  "Food Excl Food Serving Services", #  Temporary commented out
        "Clothing & Footwear",
        "Housing & Utilities",
        "Household Durables & Services",
        "Health Care",
        "Transport",
        "Communication",
        "Recreation & Culture",
        "Education"
        #  "Miscellaneous Goods & Services" #  Temporary commented out
)
```

The data is then filtered to include only data from the base year onwards (2020). This is done to narrow down the size of the dataset for easier management and faster performance, as well as to ensure the dataset's consistency with the base year:

```{r}
#| label: filter-data-date
 
# Filter the total inflation every year
total_inf_data <- data |> 
  filter(Variables %in% "All Items") |>
  select(Variables, starts_with(c("2020", "2021", "2022", "2023"))) |>
  # Convert selected columns to numeric
  mutate_at(vars(starts_with(c("2020", "2021", "2022", "2023"))), as.numeric)

# Filter the data to include only these categories and the months from 2019 onwards
data <- data |>
  filter(Variables %in% categories) |>
  select(Variables, starts_with(c("2020", "2021", "2022", "2023"))) |>
  # Convert selected columns to numeric
  mutate_at(vars(starts_with(c("2020", "2021", "2022", "2023"))), as.numeric)

# Print the filtered data
options(max.print = 1e6)
print(data, n = nrow(data), width = Inf)
```

We further transform the data by pivoting the data frame to a longer format, separating the `Month_Year` column into `Year` and `Month`, converting the `Month` column into numeric using a mapping, and sorting the data by `Year` and `Month`:

```{r}
#| label: further-transform-data
# Create a month mapping
month_mapping <- c("Jan" = 1, "Feb" = 2, "Mar" = 3, "Apr" = 4, "May" = 5, "Jun" = 6,
                   "Jul" = 7, "Aug" = 8, "Sep" = 9, "Oct" = 10, "Nov" = 11, "Dec" = 12)

# Pivot the data frame
pivoted_data <- pivot_longer(
  data, 
  cols = starts_with(c("2019", "2020", "2021","2022", "2023")),
  names_to = "Month_Year",
  values_to = "Value"
) |>
  # Separate the Month column into Year and Month
  separate(Month_Year, into = c("Year", "Month"), sep = " ") |>
  # Convert Month column into numeric using mapping
  mutate(Year = as.numeric(Year), Month = month_mapping[Month]) |>
  # To sort the data by Year, then by Month
  arrange(Year, Month)

all_items_data <- total_inf_data |>
  pivot_longer(
    cols = starts_with(c("2019", "2020", "2021", "2022", "2023")),
    names_to = "Month_Year",
    values_to = "Value"
  ) |>
  separate(Month_Year, into = c("Year", "Month"), sep = " ") |>
  mutate(
    Year = as.numeric(Year),
    Month = month_mapping[Month],
    Date = as.Date(paste(Year, Month, "01", sep = "-"))
  ) |>
  arrange(Date)

all_items_data
```

In order to allow the user to compare the trends during the pandemic and 2023, we find the average of the past years excluding 2023. This will allow the user to see the trends in the change in inflation rate between 2023 and the previous years.

```{r}
#| label: find-average-except-2023

month_dates <- unique(pivoted_data$Month)
month_dates

# month_order <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")

# Find the average of the other years except 2023
pivoted_data_except_2023 <- pivoted_data |>
  filter(Year != 2023)

pivoted_data_except_2023

average_prices_except_2023 <- pivoted_data_except_2023 |>
  group_by(Variables, Month) |>
  summarize(average_Value = mean(Value)) |>
  arrange(Variables, Month) 

# average_prices_except_2023$Month <- factor(average_prices_except_2023$Month, levels = month_order)

average_prices_except_2023 |> 
  arrange(Variables, Month)


# Excluding 2023 data from all_items_data
all_items_data_except_2023 <- all_items_data |>
  filter(Year != 2023)

average_all_items_except_2023 <- all_items_data_except_2023 |>
  group_by(Variables, Month) |>
  summarize(average_Value = mean(Value)) |>
  arrange(Month)

average_all_items_except_2023 |> 
  arrange(Month)

```

This code chunk processes the 2023 data by filtering the data to include only the year 2023

```{r}
#| label: process-2023-data

pivoted_data_2023 <- pivoted_data |>
  filter(Year == 2023)

pivoted_data_2023 |> 
  arrange(Variables, Month)

pivoted_data_2023$Year <- NULL

pivoted_data_2023

# Include only 2023 data from all_items_data
all_items_data_2023 <- all_items_data |>
  filter(Year == 2023)

all_items_data_2023 |> 
  arrange(Variables, Month)

all_items_data_2023$Year <- NULL

all_items_data_2023
```

Finally, we combine both the average data and the 2023 data to create a single dataset for visualisation:

```{r}
#| label: combine-data

combined_data <- inner_join(average_prices_except_2023, pivoted_data_2023, by = c("Variables", "Month")) |>
  rename(Value_Average = average_Value, Value_2023 = Value) 
  
# combined_data$Month <- factor(combined_data$Month, levels = month_order)

combined_data |>
  arrange(Variables, Month)

combined_all_items_data <- inner_join(average_all_items_except_2023, all_items_data_2023, by = c("Variables", "Month")) |>
  rename(Value_Average = average_Value, Value_2023 = Value)

combined_all_items_data |>
  arrange(Variables, Month)
```

# Conclusion

The data are now ready for visualization. Next, we will plot 2 trend lines, average past data and 2023 data, for each category using the ggplot2 package in the tidyverse collection. To plot the individual categories, we will use a ggplot facet grid to display each category separately. There will also be a generic trend line for all items to show the overall trend in inflation rates.
